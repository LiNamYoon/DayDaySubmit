using UnityEngine;
using System;
using System.Collections.Generic;
using ExitGames.Client.Photon.Chat;
using UnityEngine.UI;


public class ChatNewGui : MonoBehaviour, IChatClientListener
{
    public string[] ChannelsToJoinOnConnect; // 채팅 채널 리스트
    public int HistoryLengthToFetch; // 경위에 설정합니다. 어느 정도까지 이전에 보낸 메시지는 컨텍스트에 대해 가져올 수 있습니다

    public string UserName { get; set; }

    private string selectedChannelName; // mainly used for GUI/input

    public ChatClient chatClient; 


    public RectTransform ChatPanel;     // set in inspector (to enable/disable panel)
    public InputField InputFieldChat;   // set in inspector
    public Text CurrentChannelText;     // set in inspector
    public Toggle ChannelToggleToInstantiate; // set in inspector
    private readonly Dictionary<string, Toggle> channelToggles = new Dictionary<string, Toggle>(); //토글 버튼 따로 만들어야함

    public bool ShowState = true;
    public Text StateText; // set in inspector

    private string userIdInput = "";
    private static string WelcomeText = "Welcome to chat. Type \\help to list commands.";
    private static string HelpText = "\n\\subscribe <list of channelnames> subscribes channels.\n\\unsubscribe <list of channelnames> leaves channels.\n\\msg <username> <message> send private message to user.\n\\clear clears the current chat tab. private chats get closed.\n\\help gets this help message.";


    public void Start()
    {
        DontDestroyOnLoad(gameObject);
        this.ChatPanel.gameObject.SetActive(true);

        Application.runInBackground = true; // 이는 백그라운드에서 실행되어야 하며, 연결되지 않으면 연결이 끊어집니다.

        if (string.IsNullOrEmpty(UserName))
        {
            UserName = "user" + Environment.TickCount%99; //made-up username
        }

        this.chatClient = new ChatClient(this);

        string chatAppId = ChatSettings.Instance.AppId;
        this.chatClient.Connect(chatAppId, "1.0", new AuthenticationValues(UserName));

        this.ChannelToggleToInstantiate.gameObject.SetActive(false);
        Debug.Log("Connecting as: " + UserName);
    }

    // 어플이 꺼지만 포톤 쳇 연결 끊음
    public void OnApplicationQuit()
    {
        if (this.chatClient != null)
        {
            this.chatClient.Disconnect();
        }
    }

    public void Update()
    {
        if (this.chatClient != null)
        {
            this.chatClient.Service(); // 반드시 이것을 규칙적으로 부르세요! 그것은 내부적으로 노력을 제한하므로, 종종 전화를 거는 것은 괜찮다!
        }

        this.StateText.gameObject.SetActive(ShowState); // this could be handled more elegantly, but for the demo it's ok.
    }


    // 입력 키 눌렀을 때
    public void OnEnterSend()
    {
        if (Input.GetKey(KeyCode.Return) || Input.GetKey(KeyCode.KeypadEnter))
        {
            SendChatMessage(this.InputFieldChat.text);
            this.InputFieldChat.text = "";
        }
    }

    // 입력 버튼 눌렀을 때
    public void OnClickSend()
    {
        if (this.InputFieldChat != null)
        {
            SendChatMessage(this.InputFieldChat.text);
            this.InputFieldChat.text = "";
        }
    }


    public int TestLength = 2048;
    private byte[] testBytes = new byte[2048];


    // 메시지 
    private void SendChatMessage(string inputLine)
    {
        if (string.IsNullOrEmpty(inputLine))
        {
            return;
        }
        
        if ("test".Equals(inputLine))
        {
            if (this.TestLength != this.testBytes.Length)
            {
                this.testBytes = new byte[this.TestLength];
            }
            // 비밀 쳇
            this.chatClient.SendPrivateMessage(this.chatClient.AuthValues.UserId, testBytes, true);
        }

        // 프라이빗 채널이 존재하는가 체크
        bool doingPrivateChat = this.chatClient.PrivateChannels.ContainsKey(this.selectedChannelName);
        string privateChatTarget = string.Empty;
        if (doingPrivateChat)
        {
            // the channel name for a private conversation is (on the client!!) always composed of both user's IDs: "this:remote"
            // so the remote ID is simple to figure out

            string[] splitNames = this.selectedChannelName.Split(new char[] { ':' });
            privateChatTarget = splitNames[1];
            // 프라이빗 타겟만의 채널 생성 (귓속말 가능)
        }
        //UnityEngine.Debug.Log("selectedChannelName: " + selectedChannelName + " doingPrivateChat: " + doingPrivateChat + " privateChatTarget: " + privateChatTarget);
        

        if (inputLine[0].Equals('\\'))
        {
            string[] tokens = inputLine.Split(new char[] {' '}, 2);
            if (tokens[0].Equals("\\help"))
            {
                PostHelpToCurrentChannel(); // 도움말
            }
            if (tokens[0].Equals("\\state"))
            {
                int newState = int.Parse(tokens[1]);
                this.chatClient.SetOnlineStatus(newState, new string[] {"i am state " + newState}); // this is how you set your own state and (any) message
            }
            else if (tokens[0].Equals("\\subscribe") && !string.IsNullOrEmpty(tokens[1]))
            {
                this.chatClient.Subscribe(tokens[1].Split(new char[] {' ', ','}));
            }
            else if (tokens[0].Equals("\\unsubscribe") && !string.IsNullOrEmpty(tokens[1]))
            {
                this.chatClient.Unsubscribe(tokens[1].Split(new char[] {' ', ','}));
            }
            else if (tokens[0].Equals("\\clear"))
            {
                if (doingPrivateChat)
                {
                    this.chatClient.PrivateChannels.Remove(this.selectedChannelName);
                }
                else
                {
                    ChatChannel channel;
                    if (this.chatClient.TryGetChannel(this.selectedChannelName, doingPrivateChat, out channel))
                    {
                        channel.ClearMessages(); // 해당 채널의 메시지 초기화(싹다 지움)
                    }
                }
            }
            else if (tokens[0].Equals("\\msg") && !string.IsNullOrEmpty(tokens[1]))
            {
                string[] subtokens = tokens[1].Split(new char[] {' ', ','}, 2);
                if (subtokens.Length < 2) return;

                string targetUser = subtokens[0];
                string message = subtokens[1];
                this.chatClient.SendPrivateMessage(targetUser, message);
            }
        }
        else
        {
            if (doingPrivateChat)
            {
                this.chatClient.SendPrivateMessage(privateChatTarget, inputLine);
            }
            else
            {
                this.chatClient.PublishMessage(this.selectedChannelName, inputLine);
            }
        }
    }

    private void PostHelpToCurrentChannel()
    {
        this.CurrentChannelText.text += HelpText;
    }

    // 포톤 쳇에서 발생되는 에러 메시지를 보내준다.
    public void DebugReturn(ExitGames.Client.Photon.DebugLevel level, string message)
    {
        
        if (level == ExitGames.Client.Photon.DebugLevel.ERROR)
        {
            UnityEngine.Debug.LogError(message);
        }
        else if (level == ExitGames.Client.Photon.DebugLevel.WARNING)
        {
            UnityEngine.Debug.LogWarning(message);
        }
        else
        {
            UnityEngine.Debug.Log(message);
        }
    }

    // 채팅 연결
    public void OnConnected()
    {
        if (this.ChannelsToJoinOnConnect != null && this.ChannelsToJoinOnConnect.Length > 0)
        {
            // 채널에 접속합니다. (접속하고자 하는 채널 리스트, 접속하자마자 이전 대화목록 얼마나 받을 것인가);
            this.chatClient.Subscribe(this.ChannelsToJoinOnConnect, this.HistoryLengthToFetch);
        }

        this.chatClient.AddFriends(new string[] {"tobi", "ilya"}); // 포톤쳇 서버에 친구 추가를 할 수 있습니다. (임의의 친구 추가)
        this.chatClient.SetOnlineStatus(ChatUserStatus.Online); // 온라인 상태를 설정할 수 있습니다(Online / Offline)
    }
    // 채팅 끊기
    public void OnDisconnected()
    {

    }

    // 채널 변경시 발동하는 기능
    public void OnChatStateChange(ChatState state)
    {
        // use OnConnected() and OnDisconnected()

        this.StateText.text = state.ToString();
    }

    // 채널에 접속했을 때 이벤트 함수
    public void OnSubscribed(string[] channels, bool[] results)
    {
        // 각 채널에 메시지를 보냅니다. 이것은 꼭 필요한 것은 아니다!
        foreach (string channel in channels)
        {
            this.chatClient.PublishMessage(channel, "says 'hi'."); // 각 채널에 접속한 메시지 띄움

            if (this.ChannelToggleToInstantiate != null)
            {
                this.InstantiateChannelButton(channel);

            }
        }
        
        Debug.Log("OnSubscribed: " + string.Join(", ", channels));

        // 최초로 가입한 채널을 알파벳 순으로 선택
        if (this.chatClient.PublicChannels.Count > 0)
        {
            var l = new List<string>(this.chatClient.PublicChannels.Keys);
            l.Sort();
            string selected = l[0];
            if (this.channelToggles.ContainsKey(selected))
            {
                ShowChannel(selected);
                foreach (var c in this.channelToggles)
                {
                    c.Value.isOn = false;
                }
                // 채널 토글중 첫번째 채널 온
                this.channelToggles[selected].isOn = true;
                AddMessageToSelectedChannel(WelcomeText);
            }
        }
    }

    // 채널 버튼 생성( 사용하지 않아도 될것 같음)
    private void InstantiateChannelButton(string channelName)
    {
        if (this.channelToggles.ContainsKey(channelName))
        {
            Debug.Log("Skipping creation for an existing channel toggle.");
            return;
        }

        Toggle cbtn = (Toggle)GameObject.Instantiate(this.ChannelToggleToInstantiate);
        cbtn.gameObject.SetActive(true);
        cbtn.GetComponentInChildren<ChannelSelector>().SetChannel(channelName);
        cbtn.transform.SetParent(this.ChannelToggleToInstantiate.transform.parent, false);

        this.channelToggles.Add(channelName, cbtn);
    }

    // 채널 접속 취소
    public void OnUnsubscribed(string[] channels)
    {
        foreach (string channelName in channels)
        {
            if (this.channelToggles.ContainsKey(channelName))
            {
                Toggle t = this.channelToggles[channelName];
                Destroy(t);

                this.channelToggles.Remove(channelName);
            }
        }
    }

    //클라이언트가 서버로부터 새로운 메시지를 받은 앱을 알립니다.
    public void OnGetMessages(string channelName, string[] senders, object[] messages)
    {
        // call back channelname == 지금 채널과 같다면
        if (channelName.Equals(this.selectedChannelName))
        {

            // 텍스트 보여주기
            ShowChannel(this.selectedChannelName);
        }
    }

    // 개인적인 메시지 받음 (보낸사람, 메시지, 채널 이름)
    public void OnPrivateMessage(string sender, object message, string channelName)
    {
        
        this.InstantiateChannelButton(channelName);

        byte[] msgBytes = message as byte[];
        if (msgBytes != null)
        {
            Debug.Log("Message with byte[].Length: "+ msgBytes.Length);
        }
        // 지금 채널이 해당 채널이라면
        if (this.selectedChannelName.Equals(channelName))
        {
            // 보여주기
            ShowChannel(channelName);
        }
    }

    // 친구의 접속상태 업데이트 
    public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
    {
        // 친구의 상태 업데이트를받는 방법입니다.
        // 이 데모는 현재 표시된 채팅에 상태 업데이트 만 추가합니다.
        // 당신은 그것들을 버퍼링하거나 다른 방법으로 사용할 수 있습니다.

        // TODO: add status updates
        //if (activeChannel != null)
        //{
        //    activeChannel.Add("info", string.Format("{0} is {1}. Msg:{2}", user, status, message));
        //}

        Debug.LogWarning("status: " + string.Format("{0} is {1}. Msg:{2}", user, status, message));
    }

    // 시작하자 마자 실행되는 첫 메시지 (없어도 무관)
    public void AddMessageToSelectedChannel(string msg)
    {
        ChatChannel channel = null;
        bool found = this.chatClient.TryGetChannel(this.selectedChannelName, out channel);
        if (!found)
        {
            Debug.Log("AddMessageToSelectedChannel failed to find channel: " + this.selectedChannelName);
            return;
        }

        if (channel != null)
        {
            channel.Add("Bot", msg);
        }
    }


    // 메시지 보여주는 메소드
    public void ShowChannel(string channelName)
    {
        if (string.IsNullOrEmpty(channelName))
        {
            return;
        }

        ChatChannel channel = null;
        bool found = this.chatClient.TryGetChannel(channelName, out channel); // 해당 채널에 쌓였던 메시지 불러옴
        if (!found)
        {
            Debug.Log("ShowChannel failed to find channel: " + channelName);
            return;
        }

        this.selectedChannelName = channelName; 
        this.CurrentChannelText.text = channel.ToStringMessages(); // 불러온 메시지 뿌려줌
        Debug.Log("ShowChannel: " + this.selectedChannelName);
    }
}
